import asyncio
import os
from aiogram import Bot, Dispatcher, types, F, Router
from aiogram.filters import CommandStart
from aiogram.types import Message
from sqlalchemy.ext.asyncio import AsyncSession
import logging
from src.utils import scheduler_critical, scheduler_regular
from src.database import engine
from src.notifications import _add_critical_chat_id, _add_regular_chat_id, _remove_critical_chat_id, _remove_regular_chat_id
from src.notifications.exceptions import BotDeviceException
from aiogram.fsm.context import FSMContext  
from aiogram.fsm.state import State, StatesGroup
import os


class LinkState(StatesGroup):
    choosing_type_link = State()
    choosing_action = State()
    waiting_for_token = State()


logger = logging.getLogger(__name__)


TELEGRAM_BOT_TOKEN = os.environ.get("BOT_TOKEN")

if not TELEGRAM_BOT_TOKEN:
    raise ValueError("TELEGRAM_BOT_TOKEN is not set in environment variables.")

bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher()
router = Router()
dp.include_router(router)


@router.message(CommandStart())
@router.message(lambda message: message.text in ["–ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞"])
async def handle_start(message: Message, state: FSMContext):
    instruction = f"""
–ü—Ä–∏–≤–µ—Ç! –Ø FlowerMonitoring –±–æ—Ç. ‚ú®

–Ø –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É—Å—Ç—Ä–æ–π—Å—Ç–≤ FlowerMonitoring, –∫–æ–≥–¥–∞ –∏—Ö —Ä–∞—Å—Ç–µ–Ω–∏—è —Ç—Ä–µ–±—É—é—Ç –ø–æ–ª–∏–≤–∞. üíß
–ù–æ –ø–µ—Ä–µ–¥ —ç—Ç–∏–º –≤–∞–º –Ω—É–∂–Ω–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å —á–∞—Ç –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É —á–µ—Ä–µ–∑ –ø–∞–Ω–µ–ª—å –∫–æ–º–∞–Ω–¥.‚¨áÔ∏è

‚úâÔ∏è –û —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö:

–≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å, –∫–æ–≥–¥–∞ —É—Ä–æ–≤–µ–Ω—å –≤–ª–∞–∂–Ω–æ—Å—Ç–∏ –ø–æ—á–≤—ã –±—É–¥–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–º –∑–æ–Ω–µ.

–†–µ–≥—É–ª—è—Ä–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ.

"""
    
    await state.clear()

    kb = [
        [
            types.KeyboardButton(text="‚ùó‚úâÔ∏è–≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
        ],
        [
            types.KeyboardButton(text="‚úèÔ∏è–†–µ–≥—É–ª—è—Ä–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
        ]
    ]
    keyboard = types.ReplyKeyboardMarkup(keyboard=kb, input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")

    await message.reply(instruction, reply_markup=keyboard, resize_keyboard=True)
    await state.set_state(LinkState.choosing_type_link)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

@router.message(
    LinkState.choosing_type_link, 
    F.text.in_(["‚ùó‚úâÔ∏è–≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "‚úèÔ∏è–†–µ–≥—É–ª—è—Ä–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"])
)
async def type_link_chosen(message: Message, state: FSMContext):
    kb = [
        [
            types.KeyboardButton(text="–ù–∞–∑–∞–¥"),
            types.KeyboardButton(text="–ü—Ä–∏–≤—è–∑–∞—Ç—å –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É"),
            types.KeyboardButton(text="–û—Ç–≤—è–∑–∞—Ç—å –æ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞")
        ]
    ]

    keyboard = types.ReplyKeyboardMarkup(keyboard=kb, input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ")
    await state.update_data(choosen_type_link=message.text.lower())
    await message.answer(text="–¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
    await state.set_state(LinkState.choosing_action)


@router.message(
    LinkState.choosing_action,
    F.text.in_(["–ù–∞–∑–∞–¥"])
)
async def type_link_chosen_back(message: Message, state: FSMContext):
    instruction = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:"
    await state.update_data(choosen_type_link='')

    kb = [
        [
            types.KeyboardButton(text="‚ùó‚úâÔ∏è–≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
        ],
        [
            types.KeyboardButton(text="‚úèÔ∏è–†–µ–≥—É–ª—è—Ä–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
        ]
    ]

    keyboard = types.ReplyKeyboardMarkup(keyboard=kb, input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")

    await message.answer(instruction, reply_markup=keyboard, resize_keyboard=True)
    await state.set_state(LinkState.choosing_type_link)


@router.message(
    LinkState.choosing_type_link
)
async def type_link_chosen_incorrectly(message: Message):
    instruction = "–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n\n –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏–π –∏–∑ –ø–∞–Ω–µ–ª–∏ –Ω–∏–∂–µ:"

    kb = [
        [
            types.KeyboardButton(text="‚ùó‚úâÔ∏è–≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
        ],
        [
            types.KeyboardButton(text="‚úèÔ∏è–†–µ–≥—É–ª—è—Ä–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
        ]
    ]
    keyboard = types.ReplyKeyboardMarkup(keyboard=kb, input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")

    await message.answer(instruction, reply_markup=keyboard, resize_keyboard=True)

# ---------------------

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è

@router.message(
    LinkState.choosing_action, 
    F.text.in_(["–ü—Ä–∏–≤—è–∑–∞—Ç—å –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É", "–û—Ç–≤—è–∑–∞—Ç—å –æ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"])
)
async def action_chosen(message: Message, state: FSMContext):
    kb = [
        [
            types.KeyboardButton(text="–ù–∞–∑–∞–¥")
        ]
    ]

    keyboard = types.ReplyKeyboardMarkup(keyboard=kb, input_field_placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω...")
    await state.update_data(choosen_action=message.text.lower())
    await message.answer(text="–¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:", reply_markup=keyboard)
    await state.set_state(LinkState.waiting_for_token)


@router.message(
    LinkState.waiting_for_token,
    F.text.in_(["–ù–∞–∑–∞–¥"])
)
async def action_chosen_back(message: Message, state: FSMContext):
    instruction = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    await state.update_data(choosen_action='')

    kb = [
        [
            types.KeyboardButton(text="–ù–∞–∑–∞–¥"),
            types.KeyboardButton(text="–ü—Ä–∏–≤—è–∑–∞—Ç—å –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É"),
            types.KeyboardButton(text="–û—Ç–≤—è–∑–∞—Ç—å –æ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞")
        ]
    ]

    keyboard = types.ReplyKeyboardMarkup(keyboard=kb, input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ")

    await message.answer(instruction, reply_markup=keyboard, resize_keyboard=True)
    await state.set_state(LinkState.choosing_action)



@router.message(
    LinkState.choosing_action
)
async def action_chosen_incorrectly(message: Message):
    instruction = "–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π\n\n –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ –∏–∑ –¥–µ–π—Å—Ç–≤–∏–π –∏–∑ –ø–∞–Ω–µ–ª–∏ –Ω–∏–∂–µ:"

    kb = [
        [
            types.KeyboardButton(text="–ù–∞–∑–∞–¥"),
            types.KeyboardButton(text="–ü—Ä–∏–≤—è–∑–∞—Ç—å –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É"),
            types.KeyboardButton(text="–û—Ç–≤—è–∑–∞—Ç—å –æ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞")
        ]
    ]

    keyboard = types.ReplyKeyboardMarkup(keyboard=kb, input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ")

    await message.answer(instruction, reply_markup=keyboard, resize_keyboard=True)

# -----------------

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–∫–µ–Ω–∞

@router.message(
    LinkState.waiting_for_token
)
async def link_chat(message: Message, state: FSMContext):
    device_token = message.text
    user_data = await state.get_data()

    kb = [
        [
            types.KeyboardButton(text="–ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞")
        ]
    ]

    keyboard = types.ReplyKeyboardMarkup(keyboard=kb)

    type_link = user_data["choosen_type_link"]
    action = user_data["choosen_action"]


    async with AsyncSession(engine) as db:
        try:
            if type_link == "‚ùó‚úâÔ∏è—ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è":
                if action == "–ø—Ä–∏–≤—è–∑–∞—Ç—å –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É":
                    await _add_critical_chat_id(device_token, message.chat.id, db)
                elif action == "–æ—Ç–≤—è–∑–∞—Ç—å –æ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞":
                    await _remove_critical_chat_id(device_token, message.chat.id, db)
                else:
                    await message.reply(f"–¢–∞–∫–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", reply_markup=keyboard)
                    await state.clear()
                    return

            elif type_link == "‚úèÔ∏è—Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è":
                if action == "–ø—Ä–∏–≤—è–∑–∞—Ç—å –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É":
                    await _add_regular_chat_id(device_token, message.chat.id, db)
                elif action == "–æ—Ç–≤—è–∑–∞—Ç—å –æ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞":
                    await _remove_regular_chat_id(device_token, message.chat.id, db)
                else:
                    await message.reply(f"–¢–∞–∫–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", reply_markup=keyboard)
                    await state.clear()
                    return
            else:
                await message.reply(f"–¢–∞–∫–æ–≥–æ —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", reply_markup=keyboard)
                await state.clear()
                return


            if action == "–ø—Ä–∏–≤—è–∑–∞—Ç—å –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É":
                await message.reply(f"–ß–∞—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É {device_token}.", reply_markup=keyboard)
            elif action == "–æ—Ç–≤—è–∑–∞—Ç—å –æ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞":
                await message.reply(f"–ß–∞—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤—è–∑–∞–Ω –æ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ {device_token}.", reply_markup=keyboard)

            await state.clear()
            return
            
        except BotDeviceException as exception:
            await message.reply(exception.detail)
            return
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞: {e}")
            await message.reply("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ",
                                 reply_markup=keyboard)
            return



async def main():
    try:
        print("Bot started")
        asyncio.create_task(scheduler_critical(bot))
        asyncio.create_task(scheduler_regular(bot))
        await dp.start_polling(bot)
    except KeyboardInterrupt:
        print("Bot stopped")
    finally:
        await bot.session.close()


if __name__ == "__main__":
    asyncio.run(main())
